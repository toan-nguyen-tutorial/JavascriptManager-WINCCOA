"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_module_1 = __importDefault(require("node:module"));
const node_path_1 = __importDefault(require("node:path"));
const node_url_1 = require("node:url");
const app_module_path_1 = __importDefault(require("app-module-path"));
const connection_binding_1 = require("./connection-binding");
//--------------------------------------------------------------------------
// extend require() to also search in javascript in project, sub-projects
// and installation
//--------------------------------------------------------------------------
const originalNodeRequire = node_module_1.default.prototype.require;
const projSubDir = 'javascript';
const connectionBinding = connection_binding_1.ConnectionBinding.getInstance();
//@ts-expect-error Not all parameters handled
node_module_1.default.prototype.require = function (id) {
    let originalException;
    try {
        //@ts-expect-error Using arguments
        // eslint-disable-next-line prefer-rest-params, @typescript-eslint/no-unsafe-return
        return originalNodeRequire.apply(this, arguments);
    }
    catch (e) {
        originalException = e;
    }
    if (!node_path_1.default.isAbsolute(id)) {
        const relPath = node_path_1.default.join(projSubDir, id);
        for (let i = 0; i < connectionBinding.paths.length; i++) {
            try {
                const pathToTest = node_path_1.default.join(connectionBinding.paths[i], relPath);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return originalNodeRequire.apply(this, [pathToTest]);
            }
            catch (e) {
                // ignore, just try next path
            }
        }
    }
    // not found anywhere
    throw originalException;
};
//--------------------------------------------------------------------------
function initializeManager() {
    connectionBinding.start();
    // register paths to make winccoa-manager available for customer code
    const managerParentDir = node_path_1.default.dirname(node_path_1.default.dirname(__dirname));
    app_module_path_1.default.addPath(managerParentDir);
    connectionBinding.paths.forEach((subPath) => app_module_path_1.default.addPath(node_path_1.default.join(subPath, 'data', 'javascript')));
}
//--------------------------------------------------------------------------
async function startScript() {
    // argv[0] is the Node.js executable
    // argv[1] is this bootstrap script
    // argv[2-5] are the params added by PMon (-PROJ <project_name> -pmonIndex <index>)
    // argv[6] is the first of the parameters coming from progs
    const firstParamIndex = 6;
    // find script to load
    let scriptIndex = -1;
    for (let i = firstParamIndex; i < process.argv.length; i++) {
        if (process.argv[i].endsWith('.js') || process.argv[i].endsWith('.mjs')) {
            scriptIndex = i;
            break;
        }
    }
    if (scriptIndex > 0) {
        const searchedPaths = [];
        const relPath = process.argv[scriptIndex];
        const fullPath = node_path_1.default.isAbsolute(relPath)
            ? relPath
            : connectionBinding.findFile(node_path_1.default.join(projSubDir, relPath), searchedPaths);
        if (fullPath === '') {
            searchedPaths.forEach((path) => console.warn('Tested path: ' + path));
            throw new Error('Script not found (see tested paths above): ' + relPath);
        }
        // remove the elements of argv up to the script name
        for (let i = 0; i < scriptIndex; i++)
            process.argv.shift();
        // set directory to project directory and require script
        process.chdir(connectionBinding.paths[0]);
        //@ts-expect-error Importing customer JavaScript
        await import((0, node_url_1.pathToFileURL)(fullPath));
    }
    else {
        throw new Error('No script found in arguments');
    }
}
//--------------------------------------------------------------------------
// Create and initialise instance of the manager class, then start the
// script passed as startup parameter
initializeManager();
void startScript();
