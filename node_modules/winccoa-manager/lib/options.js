"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WinccoaLangTextFormat = void 0;
/**
 * Enumerates the formats in which a multi-language strings (CTRL `langString`)
 * can be returned by the API.
 * @see - {@link WinccoaOptions.langIdx}
 * - {@link WinccoaOptions.langTextFormat}
 */
var WinccoaLangTextFormat;
(function (WinccoaLangTextFormat) {
    // needs to be synchronized with NodeJsValueConverter.hxx
    /** Multi-language strings will be returned as a simple sting in the
     * current language.
     */
    WinccoaLangTextFormat[WinccoaLangTextFormat["StringActiveLanguage"] = 0] = "StringActiveLanguage";
    /** Multi-language strings will be returned as a single string in the
     *  language defined with option {@link WinccoaOptions.langIdx}.
     */
    WinccoaLangTextFormat[WinccoaLangTextFormat["StringFixed"] = 1] = "StringFixed";
    /** Multi-language strings will be returned as an object, locale names
     * are used as property names.
     * @example
     * ```ts
     * { 'de_AT.utf8': 'Deutscher Text', 'en_US.utf8': 'English text' }
     * ```
     */
    WinccoaLangTextFormat[WinccoaLangTextFormat["Object"] = 2] = "Object";
    /** Multi-language strings will be returned as an array, sorted by
     * language IDs.
     * @example
     * ```ts
     * ['Deutscher Text', 'English text']
     * ```
     */
    WinccoaLangTextFormat[WinccoaLangTextFormat["Array"] = 3] = "Array";
})(WinccoaLangTextFormat || (exports.WinccoaLangTextFormat = WinccoaLangTextFormat = {}));
