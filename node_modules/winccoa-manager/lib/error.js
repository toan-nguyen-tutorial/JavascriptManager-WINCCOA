"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WinccoaError = void 0;
/**
 * Error class that contains additional information found in WinCC OA errors, like
 * the WinCC OA error code.
 * @example Getting error details - TypeScript
 * ```ts
 * import { WinccoaManager, WinccoaError } from 'winccoa-manager';
 * const winccoa = new WinccoaManager();
 *
 * try {
 *    ...
 * } catch(exc) {
 *   // standard reporting
 *   console.error(exc);
 *
 *   // access the details
 *   var oaError = exc as WinccoaError;
 *   console.warn('Error code    : ' + oaError.code);
 *   console.warn('Error message : ' + oaError.message);
 *   console.warn('Catalogue     : ' + oaError.catalog);
 *   console.warn('Details       : ' + oaError.details);
 * }
 * ```
 * @example Getting error details - JavaScript
 * ```js
 * const { WinccoaManager } = require('winccoa-manager');
 * const winccoa = new WinccoaManager();
 *
 * try {
 *    ...
 * } catch(exc) {
 *   // standard reporting
 *   console.error(exc);
 *
 *   // access the details
 *   console.warn('Error code    : ' + exc.code);
 *   console.warn('Error message : ' + exc.message);
 *   console.warn('Catalogue     : ' + exc.catalog);
 *   console.warn('Details       : ' + exc.details);
 * }
 * ```
 */
class WinccoaError extends Error {
    /**
     * Constructor. This constructor is also used by the {@link WinccoaManager} to create
     * {@link WinccoaError} instances.
     * @param code WincCC OA error code. This can either be a number (like 71 for "DP does
     *             not exist") or a string. The meaning of string error codes can be found
     *             in the corresponding __catalog__.
     * @param message Error message corresponding to __code__.
     * @param catalog Name of the error catalog where the error message can be found. If
     *                empty, this refers to catalog `_errors.cat`.
     * @param details Additional details specific to that error. Not all errors provide
     *                this information.
     */
    constructor(code, message, catalog = '', details) {
        // Add code and catalog to message
        let codeStr = code.toString();
        if (catalog.length > 0) {
            codeStr += '/' + catalog;
        }
        // must be called before "this." can be used
        super(codeStr + ', ' + message);
        this.code = code;
        this.catalog = catalog;
        this.details = details;
        // to analyse problems like
        //   Expected a promise to be rejected with WinccoaError: X but it was rejected with WinccoaError: X
        //super("code="+code+",message="+message+",catalog="+catalog+",details="+details+";");
        this.name = 'WinccoaError';
    }
}
exports.WinccoaError = WinccoaError;
