import { WinccoaOptions } from './options';
import { WinccoaError } from './error';
import { WinccoaAlertTime } from './alerttime';
/**
 * Enumerates the type of updates received by connect callbacks.
 * @see - {@link WinccoaDpConnectCallback}
 * - {@link WinccoaDpQueryConnectCallback}
 */
export declare enum WinccoaConnectUpdateType {
    /** Normal update after value changes. */
    Normal = 0,
    /** Initial update with current values. */
    Answer = 1,
    /** Refresh update after REDU switch or DIST connection. */
    Refresh = 2
}
/**
 * Enumerates the security events that can be reported from this manager.
 * @see - {@link WinccoaManager.securityEvent}
 */
export declare enum WinccoaSecurityEventId {
    /** Unknown ID - do not use */
    Unknown = 0,
    /** Server port has been opened. Required additional parameters when calling
     *  {@link WinccoaManager.securityEvent}:
     * - args[0] - port: number
     * - args[1] - protocolDetails: string (e.g. `'https://'`)
     */
    PortOpened = 1
}
/**
 * Enumerates the type of a data point element, as returned by
 * {@link WinccoaManager.dpElementType}.
 * @see {@link WinccoaManager.dpElementType}.
 */
export declare enum WinccoaElementType {
    /** bit pattern */
    Bit32 = 24,
    /** bit pattern structure */
    Bit32Struct = 16,
    /** bit pattern */
    Bit64 = 50,
    /** bit pattern structure */
    Bit64Struct = 52,
    /** blob (binary large object) */
    Blob = 46,
    /** blob structure */
    BlobStruct = 47,
    /** bit */
    Bool = 23,
    /** bit structure */
    BoolStruct = 15,
    /** character */
    Char = 19,
    /** character structure */
    CharStruct = 11,
    /** DP-Identifier */
    Dpid = 27,
    /** label structure */
    DpidStruct = 39,
    /** dynamic array for bit pattern */
    DynBit32 = 8,
    /** dynamic bit-pattern array structure */
    DynBit32Struct = 35,
    /** dynamic array for bit pattern */
    DynBit64 = 51,
    /** dynamic bit-pattern array structure */
    DynBit64Struct = 53,
    /** dynamic blob */
    DynBlob = 48,
    /** dynamic blob structure */
    DynBlobStruct = 49,
    /** dynamic bit array */
    DynBool = 7,
    /** dynamic bit array structure */
    DynBoolStruct = 34,
    /** dynamic character array */
    DynChar = 3,
    /** dynamic character array structure */
    DynCharStruct = 30,
    /** dynamic DP-Identifier array */
    DynDpid = 29,
    /** dynamic DP-Identifier array structure */
    DynDpidStruct = 38,
    /** dynamic number array for floating decimal point */
    DynFloat = 6,
    /** dynamic number structure for floating decimal point */
    DynFloatStruct = 33,
    /** dynamic integer array */
    DynInt = 5,
    /** dynamic integer structure */
    DynIntStruct = 32,
    /** multilingual dynamic text array */
    DynLangString = 44,
    /** multilingual dynamic text structure */
    DynLangStringStruct = 45,
    /** dynamic array of Integer values (64 bit) */
    DynLong = 55,
    /** dynamic number structure for integer value (64 bit) */
    DynLongStruct = 57,
    /** dynamic text array */
    DynString = 9,
    /** dynamic text-array structure */
    DynStringStruct = 36,
    /** dynamic time array */
    DynTime = 10,
    /** dynamic time array structure */
    DynTimeStruct = 37,
    /** dynamic array of positive whole numbers */
    DynUInt = 4,
    /** dynamic array of positive integers */
    DynUIntStruct = 31,
    /** dynamic array of Positive integer values (64 bit) */
    DynULong = 59,
    /** dynamic number structure for positive integer value (64 bit) */
    DynULongStruct = 61,
    /** floating point system */
    Float = 22,
    /** number structure for floating decimal point */
    FloatStruct = 14,
    /** integer */
    Int = 21,
    /** integer structure */
    IntStruct = 13,
    /** description */
    LangString = 42,
    /** description structure */
    LangStringStruct = 43,
    /** Integer value (64 bit) */
    Long = 54,
    /** structure for integer value (64 bit) */
    LongStruct = 56,
    /** text */
    String = 25,
    /** text structure */
    StringStruct = 17,
    /** structure */
    Struct = 1,
    /** time */
    Time = 26,
    /** time structure */
    TimeStruct = 18,
    /** data point type reference */
    Typeref = 41,
    /** unsigned integer */
    UInt = 20,
    /** structure of unsigned integers */
    UIntStruct = 12,
    /** Positive integer value (64 bit) */
    ULong = 58,
    /** structure for positive integer value (64 bit) */
    ULongStruct = 60
}
/**
 * Type of callbacks from {@link WinccoaManager.dpConnect}.
 * @param dpeNames Names of the updated datapoint elements. Will always be an array, also
 *                 if it contains only one name.
 * @param values Updated values. Will always be an array, also if it contains only one value.
 * @param type Type of the update.
 * @param error In case of an error, the other parameters are undefined and this parameter will
 *              contain error information.
 * @see - {@link WinccoaManager.dpConnect}
 * - {@link WinccoaConnectUpdateType}
 * @example Connection callback
 * #### TypeScript
 * ```ts
 * import {
 *   WinccoaManager,
 *   WinccoaConnectUpdateType,
 *   WinccoaError
 * } from 'winccoa-manager';
 * const winccoa = new WinccoaManager();
 *
 * function connectCB(
 *   names: string[],
 *   values: unknown[],
 *   type: WinccoaConnectUpdateType,
 *   error?: WinccoaError
 * ) {
 *   if (error) {
 *     console.log(error);
 *     return;
 *   }
 *
 *   if (type == WinccoaConnectUpdateType.Answer)
 *     console.warn('--- Initial update ---');
 *
 *   for (let i = 0; i < names.length; i++)
 *     console.info(`[${i}] '${names[i]}' : ${values[i]}`);
 * }
 *
 * function connect() {
 *   let id = -1;
 *   try {
 *     id = winccoa.dpConnect(
 *       connectCB,
 *       ['ExampleDP_Arg1.', 'ExampleDP_Arg2.'],
 *       true
 *     );
 *   } catch (exc) {
 *    console.error(exc);
 *   }
 * }
 * ```
 * #### JavaScript
 * ```js
 * const { WinccoaManager, WinccoaConnectUpdateType } = require('winccoa-manager');
 * const winccoa = new WinccoaManager();
 *
 * function connectCB(names, values, type, error) {
 *   if (error) {
 *     console.log(error);
 *     return;
 *   }
 *
 *   if (type == WinccoaConnectUpdateType.Answer)
 *     console.warn('--- Initial update ---');
 *
 *   for (let i = 0; i < names.length; i++)
 *     console.info(`[${i}] '${names[i]}' : ${values[i]}`);
 * }
 *
 * function connect() {
 *   let id = -1;
 *   try {
 *     id = winccoa.dpConnect(
 *       connectCB,
 *       ['ExampleDP_Arg1.', 'ExampleDP_Arg2.'],
 *       true,
 *     );
 *   } catch (exc) {
 *     console.error(exc);
 *   }
 * }
 * ```
 */
export type WinccoaDpConnectCallback = (dpeNames: string[], values: unknown[], type: WinccoaConnectUpdateType, error?: WinccoaError) => void | Promise<void>;
/**
 * Type of callbacks from {@link WinccoaManager.dpQueryConnectAll} and {@link WinccoaManager.dpQueryConnectSingle}.
 * @param values Updated value(s) in a table-like structure:
 * [0][0] (empty)    | [0][1] column header   |         ...
 * ----------------- | ---------------------- | ----------------------
 * [1][0] line name  | [1][0] content of line |         ...
 * [2][0] line name  | [2][1] content of line |         ...
 * ...               | ...                    |         ...
 *
 * e.g. this is the output for the query `"SELECT '_original.._value' FROM 'ExampleDP_Arg*'"` converted
 * to JSON:
 * ```
 * [
 *   ["",":_original.._value"],
 *   ["System1:ExampleDP_Arg1.",2.43],
 *   ["System1:ExampleDP_Arg2.",5.76]
 * ]
 * ```
 *
 * @param type Type of the update.
 * @param error In case of an error, the other parameters are undefined and this parameter will
 *              contain error information.
 * > When the query passed to {@link WinccoaManager.dpQueryConnectAll} or
 * > {@link WinccoaManager.dpQueryConnectSingle} is invalid, no exception will be thrown by
 * > these methods, but the first (and only) callback will contain a {@link WinccoaError} in this parameter.
 * @see - {@link WinccoaManager.dpQueryConnectAll}
 * - {@link WinccoaManager.dpQueryConnectSingle}
 * - {@link WinccoaConnectUpdateType}
 * @example
 * ```ts
 * import {
 *   WinccoaManager,
 *   WinccoaConnectUpdateType,
 *   WinccoaError
 * } from 'winccoa-manager';
 * const winccoa = new WinccoaManager();
 *
 * function  queryConnectCB (
 *   values: unknown[][],
 *   type: WinccoaConnectUpdateType,
 *   error?: WinccoaError,
 * ) {
 *   if (error) {
 *     console.error(error);
 *     return;
 *   }
 *
 *   if (type == WinccoaConnectUpdateType.Answer)
 *     console.warn('--- Initial update ---');
 *
 *   // ignore line with index 0 (it's a header) and start with index 1
 *   for (let i = 1; i < values.length; i++) {
 *     console.info(`DPE = '%s', value = %s`, ...values[i]);
 *   }
 * };
 *
 * function connect() {
 *   let id = -1;
 *   try {
 *     id = winccoa.dpQueryConnectSingle(
 *       queryConnectCB,
 *       true,
 *       "SELECT '_original.._value' FROM 'ExampleDP_Arg*'"
 *     );
 *   } catch (exc) {
 *     console.error(exc);
 *   }
 * }
 *  ```
 * #### Connecting with user data
 * To pass user data to the callback, it is not necessary to use a different
 * API method. Instead, an arrow function can be used to include user data
 * whenever a callback is called. The same pattern can also be used for
 * other callbacks, e. g. from {@link WinccoaManager.dpConnect}
 * ```ts
 * import {
 *   WinccoaManager,
 *   WinccoaConnectUpdateType,
 *   WinccoaError
 * } from 'winccoa-manager';
 * const winccoa = new WinccoaManager();
 *
 * function  queryConnectCB (
 *   userData: string,
 *   values: unknown[][],
 *   type: WinccoaConnectUpdateType,
 *   error?: WinccoaError,
 * ) {
 *   if (error) {
 *     console.error(error);
 *     return;
 *   }
 *
 *   if (type == WinccoaConnectUpdateType.Answer)
 *     console.warn('--- Initial update --- ' + userData);
 *
 *   // ignore line with index 0 (it's a header) and start with index 1
 *   for (let i = 1; i < values.length; i++) {
 *     console.info(`DPE = '%s', value = %s`, ...values[i]);
 *   }
 * }
 *
 * function connectUserData(userData: string) {
 *   let id = -1;
 *   try {
 *     id = winccoa.dpQueryConnectSingle(
 *       // use arrow function to add userData for callback
 *       (values, type, error?) => queryConnectCB(userData, values, type, error),
 *       true,
 *       "SELECT '_original.._value' FROM 'ExampleDP_Arg*'",
 *     );
 *   } catch (exc) {
 *     console.error(exc);
 *   }
 * }
 * ```
 */
export type WinccoaDpQueryConnectCallback = (values: unknown[][], type: WinccoaConnectUpdateType, error?: WinccoaError) => void | Promise<void>;
/** Version information returned by {@link WinccoaManager.getVersionInfo} */
export interface WinccoaVersionDetails {
    /** API version details */
    api: {
        /** API version number, e.g. `7` */
        version: number;
    };
    /** WinCC OA version details */
    winccoa: {
        /** WinCC OA version, e.g. `'3.20'` */
        version: string;
        /** WinCC OA version for display purposes, e.g. `'3.20'` */
        display: string;
        /** WinCC OA platform info , e.g. `'Windows AMD64'`*/
        platform: string;
        /** WinCC OA version as an integer, e.g. `320000` */
        numeric: number;
        /** WinCC OA version number including patch as an integer, e.g. `320011`*/
        numeric_full: number;
        /** WinCC OA major version number, e.g. `3` */
        major: number;
        /** WinCC OA minor version number, e.g. `20` */
        minor: number;
        /** WinCC OA patch number, e.g. `4` */
        patch: number;
        /** WinCC OA revision number, e.g. `0` */
        revision: number;
    };
}
/**
 * Main class of the TypeScript/JavaScript API to the __WinCC OA JavaScript Manager for Node.js&#174;__.
 *
 * > **IMPORTANT**
 * >
 * > All methods described in this documentation must be __called from code inside a
 * > method or function__ to prevent unexpected or undefined behavior.
 *
 * To use the API, an instance of this class needs to be created, e. g.:
 * @example
 * ```ts
 * import { WinccoaManager } from 'winccoa-manager';
 * const winccoa = new WinccoaManager();
 * ```
 */
export declare class WinccoaManager {
    private api;
    private winccoaManagerConnection;
    /**
     * Constructor - creates new instance of an API object.
     * @example
     * ```ts
     * import { WinccoaManager } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     * ```
     */
    constructor();
    /**
     * Writes an information log entry. `console.log()` and `console.info()` are mapped
     * to this method.
     * @param args Information to be written to log.
     * @example
     * ```ts
     * let note = "Additional note.";
     * winccoa.logInfo("Info message", note);
     * ```
     */
    logInfo(...args: unknown[]): void;
    /**
     * Writes a warning log entry. `console.warn()` is mapped to this method.
     * @param args Warning information to be written to log.
     * @example
     * ```ts
     * let note = "Additional note.";
     * winccoa.logWarning("Warning message", note);
     * ```
     */
    logWarning(...args: unknown[]): void;
    /**
     * Writes a severe error log entry. `console.error()` is mapped to this method.
     * @param args Severe error information to be written to log.
     * @example
     * ```ts
     * let note = "Additional note.";
     * winccoa.logSevere("Severe message", note);
     * ```
     */
    logSevere(...args: unknown[]): void;
    /**
     * Writes a fatal error log entry. This also exits the WinCC OA manager.
     * @param args Fatal error information to be written to log.
     * @example
     * ```ts
     * let note = "Additional note.";
     * winccoa.logFatal("Fatal message", note);
     * ```
     */
    logFatal(...args: unknown[]): void;
    /**
     * Returns list of project, sub-project and product installation paths.
     * @returns List of project, sub-project and product installation paths.
     * The project path is always a first entry and the installation path is always the last.
     * @example
     * ```ts
     * let paths = winccoa.getPaths();
     * for (let i = 0; i < paths.length; i++) {
     *   console.info(paths.at(i));
     * }
     * ```
     */
    getPaths(): string[];
    /**
     * Exits the WinCC OA manager.
     * @param exitCode Exit code to return to the operating system.
     * @example
     * ```ts
     * winccoa.exit();
     * ```
     */
    exit(exitCode?: number): void;
    /**
     * Returns all available options and their values.
     * The options can be set with {@link setOptions}.
     * @returns Object containing all current option values.
     * @see - {@link setOptions}
     * - {@link WinccoaOptions}
     * @example
     * ```ts
     * let options = winccoa.getOptions();
     * for (const [key, value] of Object.entries(options)) {
     *   console.info(`Name: ${key} - Value: ${value}`);
     * }
     * ```
     */
    getOptions(): WinccoaOptions;
    /**
     * Set one or more options.
     * The options and their values can be retrieved with {@link getOptions}.
     * @note The userId option cannot be set with this method.
     * <br>The user can be set with {@link setUserId} for the instance of `WinccoaManager`.
     * <br>The user can be set with `-user` manager option for the node manager,
     * see [Administration of managers](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Pmon_Consolepanel/Pmon_Consolepanel-23.html).
     * @param obj The options to be set (see {@link WinccoaOptions} for possible options).
     * @returns Boolean `true` on success, otherwise {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} if option has wrong type or option value is out of range.
     * @see - {@link getOptions}
     * - {@link WinccoaOptions}
     * - {@link setUserId}
     * - [Administration of managers](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Pmon_Consolepanel/Pmon_Consolepanel-23.html)
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaLangTextFormat } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * function setOptionsTest() {
     *   try {
     *     winccoa.setOptions({
     *       langTextFormat: WinccoaLangTextFormat.StringFixed,
     *       langIdx: 1,
     *     });
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    setOptions(obj: Partial<Omit<WinccoaOptions, 'userId'>>): boolean;
    /**
     * Returns information about current API and WinCC OA versions.
     * */
    getVersionInfo(): WinccoaVersionDetails;
    /**
     * Checks the existence of a valid data point identifier.
     * @param dpeName A data point identifier: a sys, a DPT, a DP, a DPE, a config, a detail or an attr.
     * @returns true if at least one part of a data point identifier can be resolved correctly, otherwise false.
     * @throws {@link WinccoaError} when invalid argument type is given.
     * @see - [CTRL function `dpExists()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpExists.html)
     * @example
     * ```ts
     * let isDpExists = false;
     * try {
     *   isDpExists = winccoa.dpExists('ExampleDP_Arg1.');
     * } catch (exc) {
     *   console.error(exc);
     * }
     * console.info("Is ExampleDP_Arg1 exists - " + isDpExists);
     * ```
     */
    dpExists(dpeName: string): boolean;
    /**
     * Returns all the data point names or the data point element names that match a pattern in alphabetical order.
     * @param dpPattern Serach pattern. When an empty pattern is given (=default), then returns all datapoints.
     * <br>Wildcards are used to filter data point name.
     * The charcters `*` and `?` are used for the purpose,
     * where the asterisk (`*`) replaces any number of characters and the question mark `?` stands for just one character.
     * Only data points that have the same number of levels as specified are found.
     * Levels are separated by a period. `dpNames(**)` is equivalent to `dpNames(*.*)`.
     * <br>Furthermore:
     * - `:*` returns all configs, `:config.*` returns all details, `:config.detail.*` returns all attributes
     * - `dp.el:*` returns only the configs according to the DPE. , for example, no `_original` for a node.
     *
     * <br>Wildcards can be used in arrays (square brackets , e.g.: `[0,3,5-7]` - numbers 0,3,5,6,7) or outside arrays in option lists (in curly brackets `{}`).
     * <br>Example of wildcards in lists of options:
     * ```
     * winccoa.dpNames('{*.Ala.*,*.Ala*}', dpType);
     * winccoa.dpNames('*{.Ala.,.Ala}*', dpType);
     * winccoa.dpNames('*.A{la.,la}*', dpType);
     * winccoa.dpNames('*.Al{a.,a}*', dpType);
     * winccoa.dpNames('*.Ala{.,}*', dpType);
     * winccoa.dpNames('*.Ala{.}*', dpType);
     * winccoa.dpNames('*.Ala.*', dpType);
     * winccoa.dpNames('*.Ala*', dpType);
     * ```
     * @param dpType Data point type. Allows to restrict the returned data points to a specific data point type.
     * When using the parameter only data points that match the pattern and the selected data point type will be returned.
     * @param ignoreCase Defines if the search should ignore the casing of the search pattern (=true) or not (=false, default)
     * @returns List with data points or data point element names.
     * @throws {@link WinccoaError} when invalid argument type is given.
     * @see - [CTRL function `dpNames()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpNames.html)
     * @example
     * ```ts
     * let foundDpNames: string[] = [];
     * try {
     *   foundDpNames = winccoa.dpNames('ExampleDP*', 'ExampleDP_Float');
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * for (let i = 0; i < foundDpNames.length; i++) {
     *   console.info("DPE name: " + foundDpNames.at(i));
     * }
     * ```
     */
    dpNames(dpPattern?: string, dpType?: string, ignoreCase?: boolean): string[];
    /**
     * Returns all or selected data point types from the current project.
     * @param pattern Pattern for the returned DPTs. When an empty pattern is given (=default), then returns all DP types.
     * <br>Wildcards are used to filter data point type name.
     * The charcters `*` and `?` are used for the purpose,
     * where the asterisk (`*`) replaces any number of characters and the question mark `?` stands for just one character.
     * <br>Wildcards can be used in arrays (square brackets , e.g.: `[0,3,5-7]` - numbers 0,3,5,6,7) or outside arrays in option lists (in curly brackets `{}`).
     * <br>Example of wildcards in lists of options:
     * ```
     * winccoa.dpTypes('{*.Ala.*,*.Ala*}');
     * winccoa.dpTypes('*{.Ala.,.Ala}*');
     * winccoa.dpTypes('*.A{la.,la}*');
     * winccoa.dpTypes('*.Al{a.,a}*');
     * winccoa.dpTypes('*.Ala{.,}*');
     * winccoa.dpTypes('*.Ala{.}*');
     * winccoa.dpTypes('*.Ala.*');
     * winccoa.dpTypes('*.Ala*');
     * ```
     * @param systemId The desired system if querying from other systems. Optional parameter.
     *                 If this parameter is not defined, the own system is queried.
     * @param includeEmpty When this is set to false, data point types without existing
     *                     data points will be ignored.
     * @returns String array with all DP type names.
     * @throws {@link WinccoaError} when invalid argument type or non-existing __systemId__ is given.
     * @see - [CTRL function `dpTypes()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpTypes.html)
     * @example
     * ```ts
     * try {
     *   const foundDpTypes = winccoa.dpTypes('ExampleDP*', 1, true);
     *   for (let i = 0; i < foundDpTypes.length; i++) {
     *     console.info("DP type: " + foundDpTypes.at(i));
     *   }
     * } catch (exc) {
     *   console.error(exc);
     * }
     * ```
     */
    dpTypes(pattern?: string, systemId?: number, includeEmpty?: boolean): string[];
    /**
     * Search for file or directory in WinCC OA project and installation paths.
     * @param fileDirName the file or directory to search for
     * @returns full path of the file or directory or an empty string if not found
     * @throws {@link WinccoaError} when invalid argument type is given.
     * @example
     * ```ts
     * let configPath;
     * try {
     *   configPath = winccoa.findFile('config/config');
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info("Config file full path: " + configPath);
     * ```
     */
    findFile(fileDirName: string): string;
    /**
     * Creates a data point.
     * @param dpeName Name of the data point to be created.
     * @param dpType Type of data point to be created.
     * @param systemId To create a data point on a remote system in a distributed system,
     *                 this parameter must contain the system number.
     * @param dpId The ID of the data point. If a data point with the given ID already
     *             exists, a random ID is chosen.
     * @returns Promise - will be resolved to `true` if successful or rejected with an error.
     * @throws {@link WinccoaError} in case of:
     * - invalid argument type is given,
     * - invalid __dpeName__, __dpType__ or non-existing __systemId__ is given,
     * - data point with the given __dpeName__ is already exist.
     * @see - {@link dpDelete}
     * - [CTRL function `dpCreate()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpCreate.html)
     * @example
     * ```ts
     * let dpCreated = false;
     * try {
     *   dpCreated = await winccoa.dpCreate('newFloatDpe', 'ExampleDP_Float');
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info("DP newFloatDpe is created - " + dpCreated);
     * ```
     */
    dpCreate(dpeName: string, dpType: string, systemId?: number, dpId?: number): Promise<boolean>;
    /**
     * Set the value of one or more datapoint element(s).
     * @param dpeNames Datapoint element name(s) of the values to set.
     * @param values Values to set. Must have the same size as __dpeNames__. If __dpeNames__ is a
     *               single string and not an array, this parameter must also be a single value
     *               and not an array.
     * @returns `true` if successful, otherwise {@link WinccoaError} wil be thrown instead.
     * > Since this method does not wait for the actual value update
     * > in the database, __the update can still fail__ after this method returned `true`. Use
     * {@link dpSetWait} to also get informed about these errors.
     * @throws {@link WinccoaError} when DPE names do not exist, values cannot be converted, array
     *         sizes mismatch etc.
     * @see - {@link dpSetWait}
     * - {@link dpSetTimed}
     * - {@link dpSetTimedWait}
     * - [CTRL function `dpSet()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSet.html)
     * @example
     * ```ts
     * const dpes = ['ExampleDP_Arg1.', 'ExampleDP_DDE.b1'];
     * const values = [123.456, false];
     * try {
     *   winccoa.dpSet(dpes, values); // Two arrays of size 2
     *   winccoa.dpSet('ExampleDP_Arg2.', 2); // single value
     * } catch (exc) {
     *   console.error(exc);
     * }
     * ```
     */
    dpSet(dpeNames: string | string[], values: unknown | unknown[]): boolean;
    /**
     * {@inheritDoc dpSet}
     * @returns Promise that resolves to `true` if succesful. If not successful,
     *          a {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} when DPE names do not exist, values cannot be converted, array
     *         sizes mismatch, no write access etc.
     * @see - {@link dpSet}
     * - {@link dpSetTimed}
     * - {@link dpSetTimedWait}
     * - [CTRL function `dpSetWait()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSetWait.html)
     * @example
     * ```ts
     * const dpes = ['ExampleDP_Arg1.', 'ExampleDP_DDE.b1'];
     * const values = [123.456, false];
     * try {
     *   await winccoa.dpSetWait(dpes, values); // Two arrays of size 2
     *   await winccoa.dpSetWait('ExampleDP_Arg2.', 2); // single value
     * } catch (exc) {
     *   console.error(exc);
     * }
     * ```
     */
    dpSetWait(dpeNames: string | string[], values: unknown | unknown[]): Promise<boolean>;
    /**
     * Set values of one or more datapoint element(s) with a given source time.
     * @param time Source time for the value change.
     * @param dpeNames Datapoint element name(s) of the values to set.
     * @param values Values to set. Must have the same size as __dpeNames__. If __dpeNames__ is a
     *               single string and not an array, this parameter must also be a single value
     *               and not an array.
     * @returns Boolean `true` in case of a success, otherwise `false`.
     * > Since this method does not wait for the actual value update
     * > in the database, __the update can still fail__ after this method returned `true`. Use
     * {@link dpSetTimedWait} to also get informed about these errors.
     * @throws {@link WinccoaError} when DPE names do not exist, values cannot be converted, array
     *         sizes mismatch etc.
     * @see - {@link dpSet}
     * - {@link dpSetWait}
     * - {@link dpSetTimedWait}
     * - [CTRL function `dpSetTimed()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSetTimed.html)
     * @example
     * ```ts
     * const timeStamp = new Date('2023-01-03T04:05:06.789Z');
     * let isSuccess = false;
     * try {
     *   isSuccess = winccoa.dpSetTimed(timeStamp, 'ExampleDP_Arg1.', 2);
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info("dpSetTimed call is successed - " + isSuccess);
     * ```
     */
    dpSetTimed(time: Date, dpeNames: string | string[], values: unknown | unknown[]): boolean;
    /**
     * {@inheritDoc dpSetTimed}
     * @returns Promise that resolves to `true` if succesful. If not successful,
     *          a {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} when DPE names do not exist, values cannot be converted, array
     *         sizes mismatch, no write access etc.
     * @see - {@link dpSet}
     * - {@link dpSetTimed}
     * - {@link dpSetWait}
     * - [CTRL function `dpSetTimedWait()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSetTimedWait.html)
     * @example
     * ```ts
     * const timeStamp = new Date('2023-01-03T04:05:06.789Z');
     * let isSuccess = false;
     * try {
     *   isSuccess = await winccoa.dpSetTimedWait(timeStamp, 'ExampleDP_Arg1.', 2);
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info("Time and value are set for ExampleDP_Arg1 - " + isSuccess);
     * ```
     */
    dpSetTimedWait(time: Date, dpeNames: string | string[], values: unknown | unknown[]): Promise<boolean>;
    /**
     * Get the current values of one or more datapoint elements.
     * @async
     * @param dpeNames Datapoint element name(s) of the values to get.
     * @returns Promise that resolves to the current value(s) of the DPE(s). The received values
     *          must be cast to their expected types before they can be used.
     * @throws {@link WinccoaError} when DPE does not exist or current user has no read access to it.
     * @see [CTRL function `dpGet()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGet.html)
     * @example
     * ```ts
     * const dpes = ['ExampleDP_Arg1.', 'ExampleDP_DDE.b1'];
     * try {
     *   const values = (await winccoa.dpGet(dpes)) as [number, boolean];
     *   for (let i = 0; i < dpes.length; i++) {
     *     console.info(`${dpes[i]}: ${values[i]}`);
     *   }
     * } catch (exc) {
     *   console.error(exc);
     * }
     * ```
     */
    dpGet(dpeNames: string | string[]): Promise<unknown>;
    /**
     * Allows to set data point alert attributes.
     * @note The attributes and their constants which can be set with this method are described in the chapter
     * [_alert_hdl](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Notes/dpconfig_alert_hdl.html)
     * @param alerts Alert(s) of type {@link WinccoaAlertTime} to be set.
     * @param values Attribute value(s) to be set. Must have the same size as __alerts__. If __alerts__ is a
     *               single string and not an array, this parameter must also be a single value and not an array.
     * @returns Boolean `true` in case of a success, otherwise {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} when DPE does not exist, mismatch number of DPs and values,
     * invalid argument type, etc.
     * @see - {@link alertSetWait}
     * - {@link alertSetTimed}
     * - {@link alertSetTimedWait}
     * - {@link WinccoaAlertTime}
     * - [_alert_hdl](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Notes/dpconfig_alert_hdl.html)
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaAlertTime } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * async function alertSetTest() {
     *   const dpeWithAlert = 'ExampleDP_AlertHdl1.';  // assuming alert is triggered
     *   const result = await winccoa.dpQuery(
     *     "SELECT ALERT '_alert_hdl.._act_state', '_alert_hdl.._value' FROM '" +
     *     dpeWithAlert +
     *     "'",
     *   );
     *
     *   const ts = result[result.length - 1][1] as WinccoaAlertTime;
     *   const alertTime = new WinccoaAlertTime(ts.date, ts.count, ts.dpe + '._comment');
     *   let isSuccess = false;
     *   try {
     *     isSuccess = winccoa.alertSet(alertTime, 'Alert comment text from winccoa node manager.');
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     *
     *   console.info("AlertSet is called successfully - " + isSuccess);
     * }
     * ```
     */
    alertSet(alerts: WinccoaAlertTime | WinccoaAlertTime[], values: unknown | unknown[]): boolean;
    /**
     * {@inheritDoc alertSet}
     * @returns Promise that resolves to `true` if successful. If not successful,
     *          a {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} when DPE does not exist, mismatch number of DPs and values,
     * invalid argument type, etc.
     * @see - {@link alertSet}
     * - {@link alertSetTimed}
     * - {@link alertSetTimedWait}
     * - {@link WinccoaAlertTime}
     * - [_alert_hdl](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Notes/dpconfig_alert_hdl.html)
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaAlertTime } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * async function alertSetWaitTest() {
     *   const dpeWithAlert = 'ExampleDP_AlertHdl1.'; // assuming alert is triggered
     *   const result = await winccoa.dpQuery(
     *     `SELECT ALERT '_alert_hdl.._act_state', '_alert_hdl.._value' FROM '${dpeWithAlert}'`,
     *   );
     *
     *   const ts = result[result.length - 1][1] as WinccoaAlertTime;
     *   const alertTime = new WinccoaAlertTime(
     *     ts.date,
     *     ts.count,
     *     ts.dpe + '._comment',
     *   );
     *
     *   try {
     *     await winccoa.alertSetWait(
     *       alertTime,
     *       'Alert comment text from winccoa node manager.',
     *     );
     *     console.info(`Comment for alert of '${dpeWithAlert}' is successfully set`);
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    alertSetWait(alerts: WinccoaAlertTime | WinccoaAlertTime[], values: unknown | unknown[]): Promise<unknown>;
    /**
     * Allows to set data point alert attributes with a given timestamp.
     * @note The attributes and their constants which can be set with this method are described in the chapter
     * [_alert_hdl](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Notes/dpconfig_alert_hdl.html)
     * @param time Source time for the attribute change.
     * @param alerts Alert(s) of type {@link WinccoaAlertTime} to be set.
     * @param values Attribute value to be set. Must have the same size as __alerts__. If __alerts__ is a
     *               single string and not an array, this parameter must also be a single value and not an array.
     * @returns Boolean `true` in case of a success, otherwise {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} when DPE does not exist, mismatch number of DPs and values,
     * invalid argument type, etc.
     * @see - {@link alertSet}
     * - {@link alertSetWait}
     * - {@link alertSetTimedWait}
     * - {@link WinccoaAlertTime}
     * - [_alert_hdl](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Notes/dpconfig_alert_hdl.html)
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaAlertTime } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * async function alertSetTimedTest() {
     *   const dpeWithAlert = 'ExampleDP_AlertHdl1.';  // assuming alert is triggered
     *   const result = await winccoa.dpQuery(
     *     "SELECT ALERT '_alert_hdl.._act_state', '_alert_hdl.._value' FROM '" +
     *     dpeWithAlert +
     *     "'",
     *   );
     *
     *   const timeStamp = new Date('2024-03-19T04:05:06.789Z');
     *   const ts = result[result.length - 1][1] as WinccoaAlertTime;
     *   const alertTime = new WinccoaAlertTime(ts.date, ts.count, ts.dpe + '._ack_state');
     *   let isSuccess = false;
     *   try {
     *     isSuccess = winccoa.alertSetTimed(timeStamp, alertTime, 1);
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     *
     *   console.info("AlertSet is called successfully - " + isSuccess);
     * }
     * ```
     */
    alertSetTimed(time: Date, alerts: WinccoaAlertTime | WinccoaAlertTime[], values: unknown | unknown[]): boolean;
    /**
     * {@inheritDoc alertSetTimed}
     * @returns Promise that resolves to `true` if successful. If not successful,
     *          a {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} when DPE does not exist, mismatch number of DPs and values,
     * invalid argument type, etc.
     * @see - {@link alertSet}
     * - {@link alertSetWait}
     * - {@link alertSetTimed}
     * - {@link WinccoaAlertTime}
     * - [_alert_hdl](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/Notes/dpconfig_alert_hdl.html)
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaAlertTime } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * async function alertSetTimedWaitTest() {
     *   const dpeWithAlert = 'ExampleDP_AlertHdl1.'; // assuming alert is triggered
     *   const result = await winccoa.dpQuery(
     *     `SELECT ALERT '_alert_hdl.._act_state', '_alert_hdl.._value' FROM '${dpeWithAlert}'`,
     *   );
     *
     *   const timeStamp = new Date('2024-03-19T04:05:06.789Z');
     *   const ts = result[result.length - 1][1] as WinccoaAlertTime;
     *   const alertTime = new WinccoaAlertTime(
     *     ts.date,
     *     ts.count,
     *     ts.dpe + '._ack_state',
     *   );
     *
     *   try {
     *     await winccoa.alertSetTimedWait(timeStamp, alertTime, 1);
     *     console.info(`Alert is acknowledged at ${timeStamp}`);
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    alertSetTimedWait(time: Date, alerts: WinccoaAlertTime | WinccoaAlertTime[], values: unknown | unknown[]): Promise<unknown>;
    /**
     * Creates a connection for being notified of datapoint element updates.
     * @param callback Function that is called whenever a connected value changes.
     * @param dpeNames DPE name(s) to connect to.
     * > - Each update will contain updates for all elements in __dpeNames__, not only
     *   the changed values.
     *   - Each update will contain an array of values, also if only a single datapoint element
     *     name is given.
     * @param answer if `true`, __callback__ is called with the initial values right away, if `false`,
     *               callback is only called after an actual value change.
     * @throws {@link WinccoaError} when invalid parameter types, unknown datapoint element names etc.
     * @returns ID of the new connection (>= 0). This can be used to disconnect from
     *          updates if required with {@link dpDisconnect}. Otherwise the connection will be closed
     *          when the manager exits.
     * @remark For an example describing how to pass user data to a callback, see the second example
     *         for {@link WinccoaDpQueryConnectCallback}.
     * @see - {@link dpDisconnect}
     * - {@link WinccoaDpConnectCallback}
     * - {@link WinccoaConnectUpdateType}
     * @example
     * ``` ts
     * import {
     *   WinccoaManager,
     *   WinccoaConnectUpdateType,
     *   WinccoaError
     * } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * function connectCB(
     *   names: string[],
     *   values: unknown[],
     *   type: WinccoaConnectUpdateType,
     *   error?: WinccoaError
     * ) {
     *   if (error) {
     *     console.log(error);
     *     return;
     *   }
     *
     *   if (type == WinccoaConnectUpdateType.Answer)
     *     console.warn('--- Initial update ---');
     *
     *   for (let i = 0; i < names.length; i++)
     *     console.info(`[${i}] '${names[i]}' : ${values[i]}`);
     * }
     *
     * function connect() {
     *   let id = -1;
     *   try {
     *     id = winccoa.dpConnect(
     *       connectCB,
     *       ['ExampleDP_Arg1.', 'ExampleDP_Arg2.'],
     *       true
     *     );
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    dpConnect(callback: WinccoaDpConnectCallback, dpeNames: string | string[], answer?: boolean): number;
    /**
     * Disconnect from datapoint element update connections established with {@link dpConnect}.
     *
     * @param id ID of the connection to close as returned by {@link dpConnect}.
     * @throws {@link WinccoaError} when __id__ is not found or invalid.
     * @returns ID of the connection that has been closed (>= 0).
     * @see - {@link dpConnect}
     * @example
     * ```ts
     * function connect() {
     *   let id = -1;
     *   try {
     *     id = winccoa.dpConnect(
     *       connectCB,
     *       ['ExampleDP_Arg1.', 'ExampleDP_Arg2.'],
     *       true
     *     );
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     *
     * function disconnect() {
     *   try {
     *     winccoa.dpDisconnect(id);
     *   } catch (exc) {
     *    console.error(exc);
     *   }
     * }
     * ```
     */
    dpDisconnect(id: number): number;
    /**
     * Returns the system ID.
     * @param systemName - The name of the system (optional).
     * If it is not given, then the system ID of its own system will be returned.
     * @returns The system ID.
     * @throws {@link WinccoaError} when invalid system name is given.
     * @see - {@link getSystemName}
     * - [CTRL function `getSystemId()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/getSystemId.html)
     * @example
     * ```ts
     * let ownId;
     * let system1Id;
     * try {
     *   ownId = winccoa.getSystemId();
     *   system1Id = winccoa.getSystemId('System1:');
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info("Own system id = " + ownId);
     * console.info("System1 id = " + system1Id);
     * ```
     */
    getSystemId(systemName?: string): number;
    /**
     * Returns the system name.
     * @param systemId - System ID (optional).
     * If it is not given, then the system name of its own system will be returned.
     * @returns The system name.
     * @throws {@link WinccoaError} when invalid system ID is given.
     * @see - {@link getSystemId}
     * - [CTRL function `getSystemName()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/getSystemName.html)
     * @example
     * ```ts
     * try {
     *   const ownName = winccoa.getSystemName();
     *   const id1Name = winccoa.getSystemName(1);
     *   console.info(
     *     `Own system name = '${ownName}, system with id 1 name = '${id1Name}'`
     *   );
     * } catch (exc) {
     *   console.error(exc);
     * }
     * ```
     */
    getSystemName(systemId?: number): string;
    /**
     * Deletes a data point.
     * @param dpName - Name of the data point to be deleted.
     *            In case of a distributed system the name of the data point
     *            to be deleted must contain the system name.
     * @returns Promise - will be resolved to `true` if successful or rejected with an error.
     * @throws {@link WinccoaError} when datapoint with the given name does not exist or current user has no privileges to delete a DP.
     * @see - {@link dpCreate}
     * - [CTRL function `dpDelete()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpDelete.html)
     * @example
     * ```ts
     * let isSuccess = false;
     * try {
     *   isSuccess = await winccoa.dpCreate('newDpe', 'ExampleDP_Float');
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * if (isSuccess)
     * {
     *   try {
     *     isSuccess = await winccoa.dpDelete('newDpe');
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     *
     * console.info("DP newDpe was deleted successfully - " + isSuccess);
     * ```
     */
    dpDelete(dpName: string): Promise<boolean>;
    /**
     * Copies a data point including its configuration.
     * @param source Name of the datapoint to copy.
     * @param destination Name of the new copied datapoint. Must not exist yet.
     * @param driver Optional driver number (default 1).
     * @returns Promise - will be resolved to `true` if successful or rejected with an error.
     *          In case of an error, `error.details` will contain the same error code
     *          that CTRL function dpCopy() would return (see there).
     * @throws {@link WinccoaError} when given source datapoint does not exist, when datapoint is copied into itself, invalid argument given, etc.
     * @see - [CTRL function `dpCopy()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpCopy.html)
     * @example
     * ```ts
     * async function dpCopyTest() {
     *   let isSuccess = false;
     *   try {
     *     isSuccess = await winccoa.dpCopy('ExampleDP_Arg1', 'ExampleDP_Arg3');
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     *
     *   console.info("DP ExampleDP_Arg1 is copied to ExampleDP_Arg3 successfully - " + isSuccess);
     * }
     * ```
     */
    dpCopy(source: string, destination: string, driver?: number): Promise<boolean>;
    /**
     * Retrieves attribute values with the help of SQL statements.
     * @param query - SQL statement.
     * @returns Promise - will be resolved to `true` if successful or rejected with an error.
     * @note The query result has a table-like structure:
     * [0][0] (empty)    | [0][1] column header   |         ...
     * ----------------- | ---------------------- | ----------------------
     * [1][0] line name  | [1][0] content of line |         ...
     * [2][0] line name  | [2][1] content of line |         ...
     * ...               | ...                    |         ...
     *
     * e.g. this is the output for the query `"SELECT '_original.._value' FROM 'ExampleDP_Arg*'"` converted
     * to JSON:
     * ```
     * [
     *   ["",":_original.._value"],
     *   ["System1:ExampleDP_Arg1.",2.43],
     *   ["System1:ExampleDP_Arg2.",5.76]
     * ]
     * ```
     * @throws {@link WinccoaError} when invalid parameter or query string is given.
     * @see - {@link dpQueryConnectSingle}
     * - {@link dpQueryConnectAll}
     * - [CTRL function `dpQuery()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpQuery.html)
     * @example
     * ```ts
     * let result;
     * try {
     *   result = await winccoa.dpQuery(
     *     `SELECT '_original.._stime', '_original.._value' FROM 'ExampleDP_Arg*'`,
     *   );
     * } catch (exc) {
     *   console.error(exc);
     *   result = null;
     * }
     * if (result) {
     *   const queryTable: string[][] = result as string[][];
     *   for (let i = 0; i < queryTable.length; i++) {
     *     console.info(
     *       `query line - name: '%s' - timestamp = %s - value = %s`,
     *       ...queryTable[i],
     *     );
     *   }
     * }
     *  ```
     */
    dpQuery(query: string): Promise<unknown[][]>;
    /**
     * Calls __callback__ whenever one or more DPEs which meet the query condition are changed.
     * @param callback Function that is called whenever a subscribed DPE value changes.
     *                 The update message will contain only changed DPEs.
     * @param answer if true, callback is called with the initial DPE values right away, if false,
     *               callback is only called for an actual value change.
     * @param query - query as an SQL statement.
     * @throws {@link WinccoaError} when invalid parameter types, empty query, etc.
     * > When the query passed to this method is invalid, no exception is thrown,
     * > but the first (and only) callback will contain a {@link WinccoaError} instead.
     * @returns ID of the new connection (>= 0). This can be used to disconnect from
     *          updates if required with {@link dpQueryDisconnect}. Otherwise the connection will be closed
     *          when the manager exits.
     * @remark For an example describing how to pass user data to a callback, see the second example
     *         for {@link WinccoaDpQueryConnectCallback}.
     * @see - {@link dpQuery}
     * - {@link dpQueryConnectAll}
     * - {@link dpQueryDisconnect}
     * - {@link WinccoaConnectUpdateType}
     * - [CTRL function `dpQueryConnectSingle()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpQueryConnectSingle.html)
     * @example
     * ```ts
     * import {
     *   WinccoaManager,
     *   WinccoaConnectUpdateType,
     *   WinccoaError
     * } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * function  queryConnectCB (
     *   values: unknown[][],
     *   type: WinccoaConnectUpdateType,
     *   error?: WinccoaError
     * ) {
     *   if (error) {
     *     console.log(error);
     *     return;
     *   }
     *
     *   if (type == WinccoaConnectUpdateType.Answer)
     *     console.warn('--- Initial update ---');
     *
     *   for (let i = 0; i < values.length; i++) {
     *     console.info(`DPE = '%s', value = %s`, ...values[i]);
     *   }
     * }
     *
     * function connect() {
     *   let id = -1;
     *   try {
     *     id = winccoa.dpQueryConnectSingle(
     *       queryConnectCB,
     *       true,
     *       `SELECT '_online.._value' FROM '*' WHERE _DPT="ExampleDP_Float"`
     *     );
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     *  ```
     */
    dpQueryConnectSingle(callback: WinccoaDpQueryConnectCallback, answer: boolean, query: string): number;
    /**
     * Calls __callback__ whenever one or more DPEs which meet the query condition change.
     * > It is recommended to use {@link dpQueryConnectSingle} if possible from the
     * > performance point of view.
     * @param callback Function that is called whenever a subscribed DPE value changes.
     *                 The update message will contain all subscribed DPEs.
     * @param answer if true, callback is called with the initial DPE values right away, if false,
     *               callback is only called for an actual value change.
     * @param query - query as an SQL statement.
     * @throws {@link WinccoaError} when invalid parameter types, empty or invalid query, etc.
     * > When the query passed to this method is invalid, no exception is thrown,
     * > but the first (and only) callback will contain a {@link WinccoaError} instead.
     * @returns ID of the new connection (>= 0). This can be used to disconnect from
     *          updates if required with {@link dpQueryDisconnect}. Otherwise the connection will be closed
     *          when the manager exits.
     * @remark For an example describing how to pass user data to a callback, see the second example
     *         for {@link WinccoaDpQueryConnectCallback}.
     * @see - {@link dpQuery}
     * - {@link dpQueryConnectSingle}
     * - {@link dpQueryDisconnect}
     * - {@link WinccoaConnectUpdateType}
     * - [CTRL function `dpQueryConnectAll()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpQueryConnectAll.html)
     * @example
     * ```ts
     * import {
     *   WinccoaManager,
     *   WinccoaConnectUpdateType,
     *   WinccoaError
     * } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * function  queryConnectCB (
     *   values: unknown[][],
     *   type: WinccoaConnectUpdateType,
     *   error?: WinccoaError
     * ) {
     *   if (error) {
     *     console.log(error);
     *     return;
     *   }
     *
     *   if (type == WinccoaConnectUpdateType.Answer)
     *     console.warn('--- Initial update ---');
     *
     *   for (let i = 0; i < values.length; i++) {
     *     console.info(`DPE = '%s', value = %s`, ...values[i]);
     *   }
     * }
     *
     * function connect() {
     *   let id = -1;
     *   try {
     *     id = winccoa.dpQueryConnectAll(
     *       queryConnectCB,
     *       true,
     *       `SELECT '_online.._value' FROM '*' WHERE _DPT="ExampleDP_Float"`
     *     );
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     *  ```
     */
    dpQueryConnectAll(callback: WinccoaDpQueryConnectCallback, answer: boolean, query: string): number;
    /**
     * Disconnect from {@link dpQueryConnectSingle} (or {@link dpQueryConnectAll}) .
     *
     * @param id ID of the connection to close as returned by {@link dpQueryConnectAll} or {@link dpQueryConnectSingle}.
     * @throws {@link WinccoaError} when __id__ is not found or invalid.
     * @returns ID of the closed connection (>= 0).
     * @see - {@link dpQueryConnectAll}
     *  - {@link dpQueryConnectSingle}
     * @example
     * ```ts
     * import {
     *   WinccoaManager,
     *   WinccoaConnectUpdateType,
     *   WinccoaError
     * } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * function connect() {
     * let id = -1;
     *   try {
     *     id = winccoa.dpQueryConnectSingle(
     *       function (
     *         values: unknown[][],
     *         type: WinccoaConnectUpdateType,
     *         error?: WinccoaError
     *       ) {
     *         if (error) {
     *           console.log(error);
     *           return;
     *         }
     *
     *         console.info(values)
     *       },
     *       true,
     *       "SELECT '_online.._value' FROM '*' WHERE _DPT= \"ExampleDP_Float\""
     *       );
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     *
     * function disconnect() {
     *   try {
     *     winccoa.dpQueryDisconnect(id);
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    dpQueryDisconnect(id: number): number;
    /**
     * Sets the current user ID to the specified value for the current instance of `WinccoaManager`.
     * @param id User ID to set.
     * @param password Password to use to set user (not needed if manager started as root).
     * @returns Boolean `true` in case of a success, otherwise {@link WinccoaError} wil be thrown instead.
     * @throws {@link WinccoaError} when __id__ is not found or invalid.
     * @see - [CTRL function `setUserId()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlS_Z/setUserId.html)
     * @example
     * ```ts
     * let isSuccess = false;
     * try {
     *   isSuccess = winccoa.setUserId(2048);  // operatorAll user id
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info('User id is set to operatorAll user id successfully - ' + isSuccess);
     * ```
     */
    setUserId(id: number, password?: string): boolean;
    /**
     * Reports a security event, this must be called whenever a security-relevant
     * action is made in JavaScript (like opening a server port).
     *
     * @param id ID of the security event.
     * @param args Arguments for the security event, depending on the value
     *             of id. See {@link WinccoaSecurityEventId} for details.
     * @throws {@link WinccoaError} when id is not known, required arguments
     *         are missing in args.
     * @see {@link WinccoaSecurityEventId}
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaSecurityEventId } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * winccoa.securityEvent(WinccoaSecurityEventId.PortOpened, 8443, 'https://');
     * ```
     */
    securityEvent(id: WinccoaSecurityEventId, ...args: unknown[]): void;
    /**
     * This function returns the unit(s) of a data point.
     * @param dpeName Data point element
     * @returns Returns the unit as langText in one or several languages. In the event of an
     *          error, an empty string is returned.
     * > The returned data type can be defined with {@link setOptions}.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type.
     * @see - {@link dpSetUnit}
     * - {@link setOptions}
     * - [CTRL function `dpGetUnit()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetUnit.html)
     * @example
     * ```ts
     * try {
     *   let units = winccoa.dpGetUnit('ExampleDP_Rpt1.');
     *   console.info('DP units: ' + units);
     * } catch (exc) {
     *   console.error(exc);
     * }
     * ```
     */
    dpGetUnit(dpeName: string): unknown;
    /**
     *  Sets the unit(s) for a data point.
     * @param dpeName Data point
     * @param unit Unit (for example, kg) in one or several languages as langText.
     * @returns Promise - will be resolved to `true` if successful or rejected with an error.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type, etc.
     * @see - {@link dpGetUnit}
     * - [CTRL function `dpSetUnit()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSetUnit.html)
     * @example
     * ```ts
     * let isSuccess = false;
     * try {
     *   isSuccess = await winccoa.dpSetUnit('ExampleDP_Rpt1.', {
          'de_AT.utf8': 's',
          'en_US.utf8': 's',
          'ru_RU.utf8': 'c',
        });
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     *   console.info('DP units are set successfully - ' + isSuccess);
     * ```
     */
    dpSetUnit(dpeName: string, unit: unknown): Promise<boolean>;
    /**
     * This function returns the numerical format(s) of a data point.
     * @param dpeName Data point element
     * @returns Returns a string that contains the format (for example, '%6.2f') in one or several
     *          languages or an empty string if an error occured.
     * > The returned data type can be defined with {@link setOptions}.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type.
     * @see - {@link dpSetFormat}
     * - [CTRL function `dpGetFormat()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetFormat.html)
     * @example
     * ```ts
     * let formats;
     * try {
     *   formats = winccoa.dpGetFormat('ExampleDP_Rpt1.');
     * } catch (exc) {
     *   console.error(exc);
     *   formats = null;
     * }
     *
     * if (formats)
     *   console.info('DP formats: ' + formats);
     * ```
     */
    dpGetFormat(dpeName: string): unknown;
    /**
     * Sets the numerical format(s) of a data point.
     * @param dpeName Data point element
     * @param format A string that contains the format (for example, '%6.2f') in one or several
     *                languages.
     * @returns Promise - will be resolved to `true` if successful or rejected with an error.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type, etc.
     * @see - {@link dpGetFormat}
     * - [CTRL function `dpSetFormat()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSetFormat.html)
     * @example
     * ```ts
     * let isSuccess = false;
     * try {
     *   isSuccess = await winccoa.dpSetFormat('ExampleDP_Rpt1.', {
          'de_AT.utf8': '%.4f',
          'en_US.utf8': '%.4f',
          'ru_RU.utf8': '%.2f',
        });
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     *   console.info('DP formats are set successfully - ' + isSuccess);
     * ```
     */
    dpSetFormat(dpeName: string, format: unknown): Promise<unknown>;
    /**
     * Returns the comment (description) for the data point.
     * @param dpeName Data point element or data point
     * @param mode Mode of functionality.
     * For more details on all modes description see
     * [CTRL function `dpGetDescription()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetDescription.html).
     * @returns Description in all available languages as langText or empty strings in all
     *          languages.
     * > The returned data type can be defined with {@link setOptions}.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type.
     * @see - {@link dpSetDescription}
     * - [CTRL function `dpGetDescription()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetDescription.html)
     * @example
     * ```ts
     * let description;
     * try {
     *   description = winccoa.dpGetDescription('ExampleDP_Rpt1.');
     * } catch (exc) {
     *   console.error(exc);
     *   description = null;
     * }
     *
     * if (description)
     *   console.info('DP description: ' + description);
     * ```
     */
    dpGetDescription(dpeName: string, mode?: number): unknown;
    /**
     * Sets a comment (description) for the data point.
     * @param dpeName Data point element to be commented on
     * @param comment Comment as langText
     * @returns Promise - will be resolved to `true` if successful or rejected with an error.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type, etc.
     * @see - {@link dpGetDescription}
     * - [CTRL function `dpSetDescription()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSetDescription.html)
     * @example
     * ```ts
     * let isSuccess = false;
     * try {
     *   isSuccess = await winccoa.dpSetDescription('ExampleDP_Rpt1.', {
          'de_AT.utf8': 'German description',
          'en_US.utf8': 'English description',
          'ru_RU.utf8': 'Russian description',
        });
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info('DP description is set successfully - ' + isSuccess);
     * ```
     */
    dpSetDescription(dpeName: string, comment: unknown): Promise<boolean>;
    /**
     * Returns the alias for the specified data point.
     * @param dpeName Data point element
     * @returns the appropriate alias in the language. Note that the alias can be only unilingual.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type.
     * @see - {@link dpSetAlias}
     * - [CTRL function `dpGetAlias()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetAlias.html)
     * @example
     * ```ts
     * try {
     *   let alias = winccoa.dpGetAlias('ExampleDP_Rpt1.');
     *   console.info('DP alias: ' + alias);
     * } catch (exc) {
     *   console.error(exc);
     * }
     * ```
     */
    dpGetAlias(dpeName: string): string;
    /**
     * Returns the data typeof a data point element.
     * @param dpeName Name of the data point element
     * @returns Type of a data point element
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type.
     * @see - {@link WinccoaElementType}
     * - [CTRL function `dpElementType()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpElementType.html)
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaElementType } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * async function dpElementTypeTest()
     *   try {
     *     let dpType = await winccoa.dpElementType('ExampleDP_Arg1.');
     *     console.info('The type of ExampleDP_Arg1 is float - ' + (dpType == WinccoaElementType.Float));
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    dpElementType(dpeName: string): WinccoaElementType;
    /**
     * Sets the alias for the specified data point element.
     * @param dpeName Data point element
     * @param alias Alias to be set. Note that the alias can be set only unilingual.
     * @returns Promise - will be resolved to true if successful or rejected with an error.
     * @throws {@link WinccoaError} when data point with the given __dpeName__ is not found or invalid argument type, etc.
     * @see - {@link dpGetAlias}
     * - [CTRL function `dpSetAlias()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpSetAlias.html)
     * @example
     * ```ts
     * let isSuccess = false;
     * try {
     *   isSuccess = await winccoa.dpSetAlias('ExampleDP_Rpt1.', 'rpt1Alias');
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * console.info('DP alias is set successfully - ' + isSuccess);
     * ```
     */
    dpSetAlias(dpeName: string, alias: string): Promise<unknown>;
    /**
     * Returns the host name of the Event Manager this manager is connected to. Use this method only on redundant computers.
     * @returns Host name of the Event Manager this manager is connected to.
     * @see - [CTRL function `myReduHost()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/myReduHost.html)
     * @example
     * ```ts
     * const reduHostName = winccoa.myReduHost();
     * console.info('My redu host name - ' + reduHostName);
     * ```
     */
    myReduHost(): string;
    /**
     * Returns host number in a redundant system depending on the connection to the Event Manager - manager 1 or 2 (for example, eventHost = "host1$host2").
     * In a non-redundant configuration this always returns 1.
     * @returns Host number.
     * @see - [CTRL function `myReduHostNum()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/myReduHostNum.html)
     * @example
     * ```ts
     * const reduHostNumber = winccoa.myReduHostNum();
     * console.info('My redu host number - ' + reduHostNumber);
     * ```
     */
    myReduHostNum(): number;
    /**
     * Checks whether the project has been configured as redundant.
     * @returns `true` if project has been configured as redundant.
     * @see - [CTRL function `isRedundant()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/isRedundant.html)
     * @example
     * ```ts
     * const isProjectRedundant = winccoa.isRedundant();
     * console.info('My project is redundant - ' + isProjectRedundant);
     * ```
     */
    isRedundant(): boolean;
    /**
     * Checks if the event manager to which this manager is connected is currently
     * the active REDU partner.
     * @returns `true` if the event manager to which this manager is connected is
     *          currently the active REDU partner.
     * @see - [CTRL function `isReduActive()`](https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/isReduActive.html)
     * @example
     * ```ts
     * const isEventReduActive = winccoa.isReduActive();
     * console.info('Event currently is active - ' + isEventReduActive);
     * ```
     */
    isReduActive(): boolean;
}
