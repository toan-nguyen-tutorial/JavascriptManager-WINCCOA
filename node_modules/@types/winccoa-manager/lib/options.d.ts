/**
 * Enumerates the formats in which a multi-language strings (CTRL `langString`)
 * can be returned by the API.
 * @see - {@link WinccoaOptions.langIdx}
 * - {@link WinccoaOptions.langTextFormat}
 */
export declare enum WinccoaLangTextFormat {
    /** Multi-language strings will be returned as a simple sting in the
     * current language.
     */
    StringActiveLanguage = 0,
    /** Multi-language strings will be returned as a single string in the
     *  language defined with option {@link WinccoaOptions.langIdx}.
     */
    StringFixed = 1,
    /** Multi-language strings will be returned as an object, locale names
     * are used as property names.
     * @example
     * ```ts
     * { 'de_AT.utf8': 'Deutscher Text', 'en_US.utf8': 'English text' }
     * ```
     */
    Object = 2,
    /** Multi-language strings will be returned as an array, sorted by
     * language IDs.
     * @example
     * ```ts
     * ['Deutscher Text', 'English text']
     * ```
     */
    Array = 3
}
export interface WinccoaOptions {
    /**
     * Read only property of the __userId__ with which manager was started
     * @see - {@link WinccoaManager.setUserId}
     * - {@link WinccoaManager.getOptions}
     */
    readonly userId: number;
    /**
     * Property which defines to which format a LangText will be converted.
     * Default is `StringActiveLanguage`.
     * @see - {@link WinccoaManager.getOptions}
     * - {@link WinccoaManager.setOptions}
     * - {@link WinccoaLangTextFormat}
     * @example
     * ```ts
     * let isSuccess = false;
     * try {
     *   isSuccess = winccoa.setOptions({
     *     langTextFormat: WinccoaLangTextFormat.StringActiveLanguage,
     *    });
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * if (isSuccess){
     *   try {
     *     let description = winccoa.dpGetDescription('ExampleDP_Rpt1.');
     *     console.info('DP description for active lang only: ' + description);
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    langTextFormat: WinccoaLangTextFormat;
    /**
     * Property which applies only when {@link langTextFormat} is `StringFixed`.
     * It holds the index of the project language to return for LangTexts.
     * Language index starts with 0 and default is `0`.
     * @see - {@link WinccoaManager.getOptions}
     * - {@link WinccoaManager.setOptions}
     * - {@link langTextFormat}
     * - {@link WinccoaLangTextFormat}
     * @example
     * ```ts
     * import { WinccoaManager, WinccoaLangTextFormat } from 'winccoa-manager';
     * const winccoa = new WinccoaManager();
     *
     * let isSuccess = false;
     * try {
     *   isSuccess = winccoa.setOptions({
     *     langTextFormat: WinccoaLangTextFormat.StringFixed,
     *     langIdx: 1
     *   });
     * } catch (exc) {
     *   console.error(exc);
     * }
     *
     * if (isSuccess){
     *   try {
     *     let description = winccoa.dpGetDescription('ExampleDP_Rpt1.');
     *     console.info('DP description for 2nd project language: ' + description);
     *   } catch (exc) {
     *     console.error(exc);
     *   }
     * }
     * ```
     */
    langIdx: number;
    /**
     * Property which indicates whether long and unsigned long Variables should be returned as BigInts or numbers.
     * Default is `false`.
     * @see - {@link WinccoaManager.getOptions}
     * - {@link WinccoaManager.setOptions}
     */
    longAsBigInt: boolean;
}
